#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VERS√ÉO CORRIGIDA - Dropi Chile Bot para Railway Cron Jobs
Executa UMA VEZ e termina (para ser usado com Railway Native Cron)
CORRE√á√ÉO: Processamento din√¢mico - resolve "Linha n√£o encontrada na tabela"
"""

import time
import pandas as pd
import logging
import traceback
import os
import sys
import platform
import re
import datetime
import requests
import json
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from io import StringIO

# Adiciona o diret√≥rio atual ao path para importar db_connection
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from db_connection import get_execution_history, is_railway, save_execution_result
except ImportError:
    print("‚ùå Erro ao importar db_connection. Verifique se o arquivo existe no diret√≥rio raiz.")
    sys.exit(1)

# Constantes
THIS_COUNTRY = "chile"
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1379273630290284606/h1I670CtBauZ0J7_Oq2K5pPJOIZEAHkfI_9-gexG4jmMI0g5bMxRODt85BEcMyX_vkN_"

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('automation.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("dropi_automation_cron")

class DroplAutomationBot:
    def __init__(self):
        self.driver = None
        self.execution_start_time = None
        self.processed_items = 0
        self.success_count = 0
        self.failed_count = 0
        self.failed_items = []
        self.closed_tabs = 0
        self.found_pagination = False
        self.rows = []
        self.total_items = 0
        
        # Credenciais fixas
        self.email = "llegolatiendachile@gmail.com"
        self.password = "Chegou123!"
        
    def send_discord_notification(self, message, is_error=False):
        """Envia notifica√ß√£o para o Discord via webhook"""
        try:
            color = 0xFF0000 if is_error else 0x00FF00  # Vermelho para erro, verde para sucesso
            
            embed = {
                "embeds": [{
                    "title": "üá®üá± Dropi Chile Cron Job",
                    "description": message,
                    "color": color,
                    "timestamp": datetime.datetime.now().isoformat(),
                    "footer": {
                        "text": "Railway Cron Automation"
                    }
                }]
            }
            
            response = requests.post(DISCORD_WEBHOOK_URL, json=embed, timeout=10)
            if response.status_code == 204:
                logger.info("‚úÖ Notifica√ß√£o Discord enviada com sucesso")
            else:
                logger.warning(f"‚ö†Ô∏è Falha ao enviar notifica√ß√£o Discord: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar notifica√ß√£o Discord: {str(e)}")

    def create_screenshots_folder(self):
        """Cria pasta de screenshots se n√£o existir"""
        if not os.path.exists("screenshots"):
            os.makedirs("screenshots")
        return "screenshots"

    def setup_driver(self):
        """Configura o driver do Selenium"""
        logger.info("üîß Iniciando configura√ß√£o do driver Chrome...")
        
        chrome_options = Options()
        
        # Configura modo visual vs headless baseado no ambiente
        if is_railway():
            # Railway: sempre headless
            logger.info("üé≠ Modo headless ativado (Railway)")
            chrome_options.add_argument("--headless=new")
            chrome_options.add_argument("--disable-gpu")
        else:
            # Local: modo visual para debug
            logger.info("üëÅÔ∏è Modo visual ativado (Local) - Chrome ser√° aberto")
            # N√£o adiciona --headless para mostrar o navegador
        
        # Configura√ß√µes comuns
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--memory-pressure-off")
        chrome_options.add_argument("--max_old_space_size=4096")
        
        try:
            if is_railway():
                # No Railway, usa o Chrome j√° instalado pelo Dockerfile
                logger.info("üöÇ Inicializando o driver Chrome no Railway...")
                service = Service()
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
            else:
                # Localmente, usa o webdriver_manager
                logger.info("üíª Inicializando o driver Chrome localmente...")
                self.driver = webdriver.Chrome(
                    service=Service(ChromeDriverManager().install()),
                    options=chrome_options
                )
                
            logger.info("‚úÖ Driver do Chrome iniciado com sucesso")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar o driver Chrome: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    def verify_credentials_and_urls(self):
        """Verifica se as credenciais e URLs est√£o corretas"""
        logger.info("üîê Verificando credenciais e URLs...")
        
        logger.info(f"üìß Email: {self.email}")
        logger.info(f"üîë Senha: {'*' * len(self.password)}")
        
        test_urls = [
            "https://app.dropi.cl",
            "https://app.dropi.cl/auth/login", 
            "https://app.dropi.cl/login",
            "https://dropi.cl/login",
            "https://app.dropi.co/auth/login",
            "https://panel.dropi.cl/login",
            "https://admin.dropi.cl/login"
        ]
        
        logger.info("üåê URLs sendo testadas:")
        for url in test_urls:
            logger.info(f"  ‚Ä¢ {url}")
        
        return self.email, self.password, test_urls

    def login(self):
        """Fun√ß√£o de login melhorada com debug detalhado"""
        try:
            self.driver.maximize_window()
            
            email, password, login_urls = self.verify_credentials_and_urls()
            
            logger.info("üöÄ Iniciando processo de login...")
            
            successful_url = None
            
            for url in login_urls:
                try:
                    logger.info(f"üåê Tentando URL: {url}")
                    self.driver.get(url)
                    time.sleep(3)
                    
                    current_url = self.driver.current_url
                    page_title = self.driver.title
                    logger.info(f"üìç URL carregada: {current_url}")
                    logger.info(f"üìÑ T√≠tulo da p√°gina: {page_title}")
                    
                    if "login" in current_url.lower() or "auth" in current_url.lower():
                        successful_url = url
                        logger.info(f"‚úÖ URL v√°lida encontrada: {url}")
                        break
                    else:
                        logger.warning(f"‚ùå URL {url} redirecionou para: {current_url}")
                        
                except Exception as e:
                    logger.warning(f"‚ùå Erro ao tentar URL {url}: {str(e)}")
                    continue
            
            if not successful_url:
                logger.error("‚ùå Nenhuma URL de login v√°lida encontrada")
                return False
            
            # Aguarda a p√°gina carregar completamente
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # Captura screenshot para debug
            try:
                screenshot_path = os.path.join(self.create_screenshots_folder(), "login_page.png")
                self.driver.save_screenshot(screenshot_path)
                logger.info(f"üì∏ Screenshot da p√°gina de login salvo: {screenshot_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel salvar screenshot: {str(e)}")
            
            # Procura por campos de email
            email_field = None
            email_selectors = [
                "//input[@type='email']",
                "//input[@name='email']",
                "//input[@id='email']", 
                "//input[contains(@placeholder, 'email')]",
                "//input[contains(@placeholder, 'Email')]",
                "//input[contains(@placeholder, 'correo')]",
                "//input[contains(@name, 'user')]",
                "//input[contains(@id, 'user')]"
            ]
            
            for selector in email_selectors:
                try:
                    email_elements = self.driver.find_elements(By.XPATH, selector)
                    for element in email_elements:
                        if element.is_displayed():
                            email_field = element
                            logger.info(f"‚úÖ Campo de email encontrado com seletor: {selector}")
                            break
                    if email_field:
                        break
                except Exception as e:
                    logger.debug(f"Seletor {selector} falhou: {str(e)}")
            
            if not email_field:
                logger.error("‚ùå Campo de email n√£o encontrado")
                return False
            
            # Procura por campos de senha
            password_field = None
            password_selectors = [
                "//input[@type='password']",
                "//input[@name='password']",
                "//input[@id='password']",
                "//input[contains(@placeholder, 'senha')]",
                "//input[contains(@placeholder, 'password')]",
                "//input[contains(@placeholder, 'contrase√±a')]"
            ]
            
            for selector in password_selectors:
                try:
                    password_elements = self.driver.find_elements(By.XPATH, selector)
                    for element in password_elements:
                        if element.is_displayed():
                            password_field = element
                            logger.info(f"‚úÖ Campo de senha encontrado com seletor: {selector}")
                            break
                    if password_field:
                        break
                except Exception as e:
                    logger.debug(f"Seletor {selector} falhou: {str(e)}")
            
            if not password_field:
                logger.error("‚ùå Campo de senha n√£o encontrado")
                return False
            
            # Preenche os campos
            logger.info("‚úèÔ∏è Preenchendo campos de login...")
            
            try:
                # Preenche email
                self.driver.execute_script("arguments[0].scrollIntoView(true);", email_field)
                time.sleep(0.5)
                email_field.clear()
                email_field.send_keys(email)
                logger.info(f"‚úÖ Email preenchido: {email}")
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao preencher email: {str(e)}")
                return False
            
            try:
                # Preenche senha
                self.driver.execute_script("arguments[0].scrollIntoView(true);", password_field)
                time.sleep(0.5)
                password_field.clear()
                password_field.send_keys(password)
                logger.info("‚úÖ Senha preenchida")
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao preencher senha: {str(e)}")
                return False
            
            # Procura e clica no bot√£o de login
            logger.info("üîç Procurando bot√£o de login...")
            
            login_button = None
            login_selectors = [
                "//button[contains(text(), 'Iniciar Sesi√≥n')]",
                "//button[contains(text(), 'Iniciar Sesion')]", 
                "//button[contains(text(), 'Login')]",
                "//button[contains(text(), 'Entrar')]",
                "//button[contains(text(), 'Ingresar')]",
                "//input[@type='submit']",
                "//button[@type='submit']",
                "//button[contains(@class, 'login')]",
                "//button[contains(@class, 'btn-primary')]"
            ]
            
            for selector in login_selectors:
                try:
                    login_elements = self.driver.find_elements(By.XPATH, selector)
                    for element in login_elements:
                        if element.is_displayed():
                            login_button = element
                            logger.info(f"‚úÖ Bot√£o de login encontrado com seletor: {selector}")
                            break
                    if login_button:
                        break
                except Exception as e:
                    logger.debug(f"Seletor {selector} falhou: {str(e)}")
            
            if not login_button:
                logger.error("‚ùå Bot√£o de login n√£o encontrado")
                return False
            
            # Clica no bot√£o de login
            logger.info("üéØ Tentando fazer login...")
            
            try:
                self.driver.execute_script("arguments[0].scrollIntoView(true);", login_button)
                time.sleep(1)
                
                try:
                    login_button.click()
                    logger.info("‚úÖ Clique normal realizado")
                except Exception as e1:
                    logger.info(f"Clique normal falhou: {str(e1)}")
                    try:
                        self.driver.execute_script("arguments[0].click();", login_button)
                        logger.info("‚úÖ Clique JavaScript realizado")
                    except Exception as e2:
                        logger.info(f"Clique JavaScript falhou: {str(e2)}")
                        try:
                            password_field.send_keys(Keys.ENTER)
                            logger.info("‚úÖ Enter enviado")
                        except Exception as e3:
                            logger.error(f"Todos os m√©todos de clique falharam: {str(e3)}")
                            return False
            except Exception as e:
                logger.error(f"‚ùå Erro ao clicar no bot√£o de login: {str(e)}")
                return False
            
            # Aguarda e verifica o resultado
            logger.info("üîç Verificando resultado do login...")
            time.sleep(8)
            
            current_url = self.driver.current_url
            page_title = self.driver.title
            logger.info(f"üìç URL ap√≥s login: {current_url}")
            logger.info(f"üìÑ T√≠tulo ap√≥s login: {page_title}")
            
            # Captura screenshot ap√≥s login
            try:
                screenshot_path = os.path.join(self.create_screenshots_folder(), "after_login.png")
                self.driver.save_screenshot(screenshot_path)
                logger.info(f"üì∏ Screenshot p√≥s-login salvo: {screenshot_path}")
            except:
                pass
            
            # Verifica indicadores de sucesso/falha
            success_indicators = ["dashboard", "novelties", "orders", "panel"]
            failure_indicators = ["login", "auth", "error", "invalid"]
            
            url_lower = current_url.lower()
            
            # Verifica indicadores de sucesso
            for indicator in success_indicators:
                if indicator in url_lower:
                    logger.info(f"‚úÖ LOGIN BEM-SUCEDIDO - Indicador de sucesso encontrado: {indicator}")
                    return True
            
            # Se n√£o redirecionou da p√°gina de login, provavelmente falhou
            if "login" in url_lower or "auth" in url_lower:
                logger.error("‚ùå LOGIN FALHOU - Ainda na p√°gina de login")
                return False
            
            # Teste final: tenta navegar para o dashboard
            logger.info("üîç Teste final: navegando para dashboard...")
            try:
                dashboard_urls = [
                    "https://app.dropi.cl/dashboard",
                    "https://app.dropi.cl/dashboard/novelties"
                ]
                
                for dashboard_url in dashboard_urls:
                    try:
                        self.driver.get(dashboard_url)
                        time.sleep(3)
                        final_url = self.driver.current_url
                        
                        if "login" not in final_url.lower():
                            logger.info(f"‚úÖ LOGIN CONFIRMADO - Acesso autorizado ao dashboard: {final_url}")
                            return True
                        else:
                            logger.warning(f"‚ùå Redirecionado para login ao tentar acessar: {dashboard_url}")
                    except Exception as e:
                        logger.debug(f"Erro ao testar dashboard {dashboard_url}: {str(e)}")
                        continue
            except Exception as e:
                logger.error(f"Erro no teste final: {str(e)}")
            
            logger.error("‚ùå LOGIN FALHOU - N√£o foi poss√≠vel confirmar autentica√ß√£o")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå ERRO GERAL NO LOGIN: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    def verify_authentication(self):
        """Verifica se o usu√°rio est√° autenticado"""
        try:
            current_url = self.driver.current_url
            page_text = self.driver.find_element(By.TAG_NAME, "body").text.lower()
            
            if ("login" in current_url or 
                "registro" in page_text or 
                "crear cuenta" in page_text or
                "registrarme" in page_text):
                return False
            
            return True
        except:
            return False

    def navigate_to_novelties(self):
        """Navega at√© a p√°gina de novelties"""
        try:
            logger.info("üß≠ Navegando diretamente para a p√°gina de novelties...")
            self.driver.get("https://app.dropi.cl/dashboard/novelties")
            time.sleep(5)
            
            current_url = self.driver.current_url
            logger.info(f"üìç URL atual ap√≥s navega√ß√£o: {current_url}")
            
            if not self.verify_authentication():
                logger.error("‚ùå N√£o est√° autenticado - redirecionado para p√°gina de registro/login")
                return False
            
            logger.info("üîç Verificando se a tabela de novelties foi carregada...")
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.XPATH, "//table"))
                )
                logger.info("‚úÖ Tabela de novelties encontrada!")
            except:
                logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar a tabela, mas continuando...")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao navegar at√© Novelties: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    def configure_entries_display(self):
        """Configura para exibir 1000 entradas"""
        try:
            current_url = self.driver.current_url
            if "novelties" not in current_url:
                logger.warning(f"‚ö†Ô∏è N√£o est√° na p√°gina de novelties. URL atual: {current_url}")
                self.driver.get("https://app.dropi.cl/dashboard/novelties")
                time.sleep(5)
            
            # Aguarda a p√°gina carregar completamente (especialmente importante localmente)
            logger.info("‚è≥ Aguardando p√°gina carregar completamente...")
            
            # Aguarda o elemento "Loading..." desaparecer
            try:
                WebDriverWait(self.driver, 30).until_not(
                    EC.text_to_be_present_in_element((By.TAG_NAME, "body"), "Loading ...")
                )
                logger.info("‚úÖ Loading conclu√≠do")
            except TimeoutException:
                logger.warning("‚ö†Ô∏è Timeout esperando loading, mas continuando...")
            
            # Aguarda tabela aparecer
            try:
                WebDriverWait(self.driver, 20).until(
                    EC.presence_of_element_located((By.XPATH, "//table"))
                )
                logger.info("‚úÖ Tabela detectada")
            except TimeoutException:
                logger.warning("‚ö†Ô∏è Tabela n√£o detectada ainda, tentando localizar...")
            
            # Rola at√© o final da p√°gina
            logger.info("üìú Rolando at√© o final da p√°gina para verificar op√ß√µes de exibi√ß√£o...")
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)
            
            # Procura pelo select
            logger.info("üîç Procurando elemento select...")
            
            entries_found = False
            try:
                select_elements = self.driver.find_elements(By.XPATH, "//select[@name='select' and @id='select' and contains(@class, 'custom-select')]")
                
                if not select_elements:
                    select_elements = self.driver.find_elements(By.XPATH, "//select[contains(@class, 'custom-select') or contains(@class, 'form-control')]")
                
                if not select_elements:
                    select_elements = self.driver.find_elements(By.TAG_NAME, "select")
                
                if select_elements:
                    logger.info(f"‚úÖ Elemento select encontrado: {len(select_elements)} elementos")
                    
                    select_element = select_elements[0]
                    select = Select(select_element)
                    
                    options_text = [o.text for o in select.options]
                    logger.info(f"üìã Op√ß√µes dispon√≠veis no select: {options_text}")
                    
                    try:
                        select.select_by_visible_text("1000")
                        logger.info("‚úÖ Selecionado '1000' pelo texto vis√≠vel")
                        entries_found = True
                    except Exception as e:
                        logger.info(f"‚ùå Erro ao selecionar por texto vis√≠vel: {str(e)}")
                        
                        try:
                            for i, option in enumerate(select.options):
                                if "1000" in option.text or "1000" in option.get_attribute("value"):
                                    select.select_by_index(i)
                                    logger.info(f"‚úÖ Selecionado '1000' pelo √≠ndice {i}")
                                    entries_found = True
                                    break
                        except Exception as e:
                            logger.info(f"‚ùå Erro ao selecionar por √≠ndice: {str(e)}")
                    
                    if entries_found:
                        logger.info("üéØ Configurado para exibir 1000 entradas")
                        self.found_pagination = True
                        time.sleep(8)  # Aguarda mais tempo para recarregar
                        
                        try:
                            WebDriverWait(self.driver, 30).until(
                                lambda d: len(d.find_elements(By.XPATH, "//table/tbody/tr")) > 0
                            )
                            logger.info("‚úÖ Linhas da tabela carregadas com sucesso!")
                        except TimeoutException:
                            logger.warning("‚è∞ Timeout esperando pelas linhas da tabela")
                else:
                    logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar o elemento select")
            except Exception as e:
                logger.error(f"‚ùå Erro ao configurar quantidade de entradas: {str(e)}")
            
            # Volta para o topo da p√°gina
            self.driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(2)
            
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar exibi√ß√£o de entradas: {str(e)}")
            return False

    def extract_customer_info(self):
        """Extrai informa√ß√µes do cliente da p√°gina"""
        try:
            logger.info("üìã Extraindo informa√ß√µes do cliente...")
            
            customer_info = {
                "address": "",
                "name": "",
                "phone": ""
            }
            
            # Procura pelo cabe√ßalho "ORDERS TO:"
            try:
                header_info = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'ORDERS TO:')]")
                
                if header_info:
                    for element in header_info:
                        try:
                            parent = element.find_element(By.XPATH, "./..")
                            parent_text = parent.text
                            
                            lines = parent_text.split('\n')
                            if len(lines) > 1:
                                for i, line in enumerate(lines):
                                    if "ORDERS TO:" in line:
                                        if i + 1 < len(lines):
                                            customer_info["name"] = lines[i + 1]
                                        if i + 2 < len(lines):
                                            customer_info["address"] = lines[i + 2]
                                        break
                        except Exception as e:
                            logger.debug(f"Erro ao extrair de ORDERS TO:: {str(e)}")
            except Exception as e:
                logger.debug(f"Erro ao buscar ORDERS TO:: {str(e)}")
            
            # Procura pelo campo de telefone
            try:
                phone_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Telf.')]")
                for element in phone_elements:
                    element_text = element.text
                    if "Telf." in element_text:
                        phone_parts = element_text.split("Telf.")
                        if len(phone_parts) > 1:
                            customer_info["phone"] = phone_parts[1].strip()
                            break
            except Exception as e:
                logger.debug(f"Erro ao buscar telefone: {str(e)}")
            
            # Valores padr√£o para campos n√£o encontrados
            if not customer_info["name"]:
                customer_info["name"] = "Nome do Cliente"
            
            if not customer_info["address"]:
                customer_info["address"] = "Endere√ßo de Entrega"
            
            if not customer_info["phone"]:
                customer_info["phone"] = "N√£o informado"
                
            return customer_info
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair informa√ß√µes do cliente: {str(e)}")
            return {
                "address": "Endere√ßo de Entrega",
                "name": "Nome do Cliente",
                "phone": "N√£o informado"
            }

    def parse_chilean_address(self, address):
        """Extrai componentes espec√≠ficos de um endere√ßo chileno"""
        try:
            logger.info(f"üè† Analisando endere√ßo chileno: {address}")
            
            components = {
                "calle": "",
                "numero": "",
                "comuna": "",
                "region": ""
            }
            
            # Extrai n√∫mero
            numero_match = re.search(r'\d+', address)
            if numero_match:
                components["numero"] = numero_match.group(0)
            else:
                components["numero"] = "1"
            
            # Extrai calle
            dash_index = address.find('-')
            if dash_index != -1:
                components["calle"] = address[:dash_index].strip()
            else:
                if numero_match:
                    numero = components["numero"]
                    calle_index = address.find(numero)
                    if calle_index > 0:
                        components["calle"] = address[:calle_index].strip()
                else:
                    components["calle"] = address
            
            # Extrai comuna e regi√£o
            last_comma_index = address.rfind(',')
            
            if last_comma_index != -1:
                comuna_region_part = address[last_comma_index+1:].strip()
                
                if "BIO - BIO" in comuna_region_part.upper():
                    bio_index = comuna_region_part.upper().find("BIO - BIO")
                    dash_before_bio = comuna_region_part[:bio_index].rfind('-')
                    
                    if dash_before_bio != -1:
                        components["comuna"] = comuna_region_part[:dash_before_bio].strip()
                        components["region"] = "BIO - BIO"
                else:
                    last_hyphen_index = comuna_region_part.rfind('-')
                    
                    if last_hyphen_index != -1:
                        components["comuna"] = comuna_region_part[:last_hyphen_index].strip()
                        components["region"] = comuna_region_part[last_hyphen_index+1:].strip()
                    else:
                        components["comuna"] = comuna_region_part.strip()
            
            return components
        except Exception as e:
            logger.error(f"‚ùå Erro ao analisar endere√ßo chileno: {str(e)}")
            return {
                "calle": "",
                "numero": "",
                "comuna": "",
                "region": ""
            }

    def generate_automatic_message(self, form_text):
        """Gera mensagens autom√°ticas com base no texto da incid√™ncia"""
        try:
            form_text = form_text.upper().strip()
            logger.info(f"ü§ñ Analisando texto para mensagem autom√°tica: '{form_text[:100]}...'")
            
            if any(phrase in form_text for phrase in ["CLIENTE AUSENTE", "NADIE EN CASA"]):
                message = "Entramos en contacto con el cliente y √©l se disculp√≥ y mencion√≥ que estar√° en casa para recibir el producto en este pr√≥ximo intento."
                logger.info("‚úÖ Resposta selecionada: CLIENTE AUSENTE")
                return message
            
            if "PROBLEMA COBRO" in form_text:
                message = "En llamada telef√≥nica, el cliente afirm√≥ que estar√° con dinero suficiente para comprar el producto, por favor intenten nuevamente."
                logger.info("‚úÖ Resposta selecionada: PROBLEMA COBRO")
                return message
            
            if any(phrase in form_text for phrase in ["DIRECCI√ìN INCORRECTA", "DIRECCION INCORRECTA", "FALTAN DATOS", "INUBICABLE", "COMUNA ERRADA", "CAMBIO DE DOMICILIO"]):
                message = "En llamada telef√≥nica, el cliente rectific√≥ sus datos para que la entrega suceda de forma m√°s asertiva."
                logger.info("‚úÖ Resposta selecionada: PROBLEMA DE ENDERE√áO")
                return message
            
            if any(phrase in form_text for phrase in ["RECHAZA", "RECHAZADA"]):
                message = "En llamada telef√≥nica, el cliente afirma que quiere el producto y mencion√≥ que no fue buscado por la transportadora. Por lo tanto, por favor env√≠en el producto hasta el cliente."
                logger.info("‚úÖ Resposta selecionada: RECHAZO DE ENTREGA")
                return message
            
            logger.warning("‚ö†Ô∏è Nenhuma condi√ß√£o conhecida encontrada na incid√™ncia")
            return ""
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar mensagem autom√°tica: {str(e)}")
            return ""

    def check_and_close_tabs(self):
        """Verifica se h√° novas guias abertas e as fecha"""
        try:
            handles = self.driver.window_handles
            
            if len(handles) > 1:
                current_handle = self.driver.current_window_handle
                
                for handle in handles:
                    if handle != current_handle:
                        self.driver.switch_to.window(handle)
                        self.driver.close()
                        self.closed_tabs += 1
                
                self.driver.switch_to.window(current_handle)
                logger.info(f"üóÇÔ∏è Fechadas {len(handles) - 1} guias extras")
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar e fechar guias: {str(e)}")

    def get_available_novelty_rows(self):
        """
        Obt√©m todas as linhas que t√™m bot√£o Save dispon√≠vel
        """
        try:
            # Aguarda tabela estar presente
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//table"))
            )
            
            # Procura por linhas com bot√£o Save
            rows_with_save = []
            
            # M√∫ltiplos seletores para encontrar linhas
            row_selectors = [
                "//table/tbody/tr[.//button[contains(@class, 'btn-success')]]",
                "//table//tr[.//button[contains(text(), 'Save')]]",
                "//table//tr[.//button[contains(@class, 'btn-success') and contains(text(), 'Save')]]"
            ]
            
            for selector in row_selectors:
                try:
                    found_rows = self.driver.find_elements(By.XPATH, selector)
                    if found_rows:
                        rows_with_save = found_rows
                        logger.info(f"‚úÖ Encontradas {len(found_rows)} linhas com bot√£o Save usando: {selector}")
                        break
                except Exception as e:
                    logger.debug(f"Seletor falhou: {selector} - {str(e)}")
                    continue
            
            # Filtra apenas linhas vis√≠veis
            visible_rows = []
            for row in rows_with_save:
                try:
                    if row.is_displayed():
                        # Verifica se realmente tem bot√£o Save vis√≠vel
                        save_buttons = row.find_elements(By.XPATH, ".//button[contains(@class, 'btn-success')]")
                        if save_buttons and any(btn.is_displayed() for btn in save_buttons):
                            visible_rows.append(row)
                except Exception as e:
                    logger.debug(f"Erro ao verificar visibilidade da linha: {str(e)}")
                    continue
            
            logger.info(f"üìä Linhas vis√≠veis com bot√£o Save: {len(visible_rows)}")
            return visible_rows
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter linhas dispon√≠veis: {str(e)}")
            return []

    def process_single_novelty(self, row_element, iteration_number):
        """
        Processa uma √∫nica novelty
        Par√¢metros:
        - row_element: elemento da linha da tabela
        - iteration_number: n√∫mero da itera√ß√£o para logs
        """
        try:
            logger.info(f"üéØ Processando novelty (itera√ß√£o {iteration_number})")
            
            # Rola at√© a linha
            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", row_element)
            time.sleep(1)
            
            # Obt√©m ID da linha para logs
            try:
                row_cells = row_element.find_elements(By.TAG_NAME, "td")
                row_id = row_cells[0].text if row_cells else f"Itera√ß√£o {iteration_number}"
            except:
                row_id = f"Itera√ß√£o {iteration_number}"
            
            logger.info(f"üìã Processando: {row_id}")
            
            # Encontra bot√£o Save na linha
            save_buttons = row_element.find_elements(By.XPATH, ".//button[contains(@class, 'btn-success')]")
            
            if not save_buttons:
                logger.error("‚ùå Bot√£o Save n√£o encontrado na linha")
                return False
            
            save_button = save_buttons[0]
            
            # Clica no Save
            try:
                self.driver.execute_script("arguments[0].click();", save_button)
                logger.info("‚úÖ Bot√£o Save clicado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao clicar no Save: {str(e)}")
                return False
            
            # Aguarda modal aparecer
            time.sleep(5)
            
            # Verifica se modal apareceu
            modal_appeared = False
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.any_of(
                        EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'modal')]")),
                        EC.presence_of_element_located((By.XPATH, "//button[contains(text(), 'Yes')]")),
                        EC.presence_of_element_located((By.XPATH, "//button[contains(text(), 'Sim')]"))
                    )
                )
                modal_appeared = True
                logger.info("‚úÖ Modal detectado")
            except TimeoutException:
                logger.error("‚ùå Modal n√£o apareceu - item pode j√° estar processado")
                return False
            
            if not modal_appeared:
                return False
            
            # Clica em Yes/Sim
            yes_clicked = False
            for text in ["Yes", "Sim", "YES", "SIM"]:
                try:
                    yes_buttons = self.driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
                    for button in yes_buttons:
                        if button.is_displayed():
                            self.driver.execute_script("arguments[0].click();", button)
                            logger.info(f"‚úÖ Clicado em '{text}'")
                            yes_clicked = True
                            break
                    if yes_clicked:
                        break
                except:
                    continue
            
            if not yes_clicked:
                logger.error("‚ùå N√£o foi poss√≠vel clicar em Yes/Sim")
                return False
            
            time.sleep(5)
            
            # Extrai informa√ß√µes e preenche formul√°rio
            customer_info = self.extract_customer_info()
            
            # Processa formul√°rio
            form_success = self.fill_and_submit_form(customer_info)
            
            if form_success:
                # Aguarda finaliza√ß√£o
                time.sleep(8)
                
                # Verifica se modal fechou (sucesso)
                modal_closed = True
                try:
                    modal_elements = self.driver.find_elements(By.XPATH, "//div[contains(@class, 'modal') and contains(@style, 'display: block')]")
                    if modal_elements:
                        modal_closed = False
                except:
                    pass
                
                # Fecha guias extras
                self.check_and_close_tabs()
                
                if modal_closed:
                    logger.info(f"‚úÖ Novelty {row_id} processada com sucesso!")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Modal ainda aberto para {row_id}")
                    return False
            else:
                logger.error(f"‚ùå Falha no formul√°rio para {row_id}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar novelty: {str(e)}")
            logger.error(traceback.format_exc())
            return False

    def fill_and_submit_form(self, customer_info):
        """
        Preenche e submete o formul√°rio da novelty
        """
        try:
            # Analisa texto para mensagem autom√°tica
            try:
                page_text = self.driver.find_element(By.TAG_NAME, "body").text
                automatic_message = self.generate_automatic_message(page_text)
                if automatic_message:
                    customer_info["automatic_message"] = automatic_message
            except Exception as e:
                logger.debug(f"Erro ao analisar texto: {str(e)}")
            
            # Procura formul√°rio
            form_modal = None
            try:
                form_modal = WebDriverWait(self.driver, 10).until(
                    EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'modal-body')]"))
                )
            except:
                try:
                    form_modal = self.driver.find_element(By.TAG_NAME, "body")
                except:
                    logger.error("‚ùå Formul√°rio n√£o encontrado")
                    return False
            
            if not form_modal:
                return False
            
            # Preenche campos
            address_components = self.parse_chilean_address(customer_info["address"])
            
            fields_to_fill = [
                (["Datos adicionales a la direcci√≥n", "Datos adicionales"], customer_info["address"]),
                (["Soluci√≥n", "Solucion"], customer_info.get("automatic_message", customer_info["address"])),
                (["Calle"], address_components["calle"]),
                (["Numero", "N√∫mero"], address_components["numero"]),
                (["Comuna"], address_components["comuna"]),
                (["Region", "Regi√≥n"], address_components["region"]),
                (["Nombre", "Nome"], customer_info["name"]),
                (["Celular", "Tel√©fono"], customer_info["phone"])
            ]
            
            fields_filled = 0
            for labels, value in fields_to_fill:
                if self.fill_field_by_label(form_modal, labels, value):
                    fields_filled += 1
            
            logger.info(f"‚úèÔ∏è Preenchidos {fields_filled} campos")
            
            if fields_filled > 0:
                # Salva formul√°rio
                if self.click_save_button():
                    logger.info("‚úÖ Formul√°rio salvo")
                    return True
                else:
                    logger.error("‚ùå Falha ao salvar formul√°rio")
                    return False
            else:
                logger.error("‚ùå Nenhum campo preenchido")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro no formul√°rio: {str(e)}")
            return False

    def process_all_novelties(self):
        """
        NOVA VERS√ÉO: Processa novelties dinamicamente
        Sempre pega a primeira linha dispon√≠vel com bot√£o Save
        """
        try:
            logger.info(f"üîÑ Iniciando processamento din√¢mico de novelties...")
            
            max_iterations = 100  # Limite de seguran√ßa
            iteration = 0
            
            while iteration < max_iterations:
                iteration += 1
                
                logger.info(f"üîÑ Itera√ß√£o {iteration} - Buscando novelties dispon√≠veis...")
                
                # Aguarda p√°gina estabilizar
                time.sleep(3)
                
                # Recarrega todas as linhas da tabela
                available_rows = self.get_available_novelty_rows()
                
                if not available_rows:
                    logger.info("‚úÖ Nenhuma novelty dispon√≠vel para processar - Finalizando")
                    break
                
                logger.info(f"üìã Encontradas {len(available_rows)} novelties dispon√≠veis")
                
                # Sempre processa a PRIMEIRA linha dispon√≠vel
                success = self.process_single_novelty(available_rows[0], iteration)
                
                if success:
                    self.success_count += 1
                    logger.info(f"‚úÖ Novelty {iteration} processada com sucesso!")
                else:
                    self.failed_count += 1
                    self.failed_items.append({
                        "id": f"Itera√ß√£o {iteration}",
                        "error": "Falha no processamento"
                    })
                    logger.error(f"‚ùå Falha ao processar novelty {iteration}")
                
                # Pausa entre processamentos
                time.sleep(2)
            
            if iteration >= max_iterations:
                logger.warning("‚ö†Ô∏è Limite m√°ximo de itera√ß√µes atingido")
            
            logger.info(f"üéØ Processamento conclu√≠do: {self.success_count} sucessos, {self.failed_count} falhas")
            
        except Exception as e:
            logger.error(f"‚ùå Erro no processamento de novelties: {str(e)}")
            logger.error(traceback.format_exc())

    def fill_field_by_label(self, form_modal, label_texts, value):
        """Preenche um campo espec√≠fico do formul√°rio"""
        try:
            for label_text in label_texts:
                try:
                    # Procura por input com atributos relacionados ao label
                    input_selectors = [
                        f"//input[contains(@id, '{label_text.lower()}')]",
                        f"//input[contains(@name, '{label_text.lower()}')]",
                        f"//input[contains(@placeholder, '{label_text}')]",
                        f"//label[contains(text(), '{label_text}')]//following::input[1]",
                        f"//*[contains(text(), '{label_text}')]//following::input[1]"
                    ]
                    
                    for selector in input_selectors:
                        try:
                            input_fields = self.driver.find_elements(By.XPATH, selector)
                            for input_field in input_fields:
                                if input_field.is_displayed():
                                    # Preenche o campo
                                    self.driver.execute_script("arguments[0].scrollIntoView(true);", input_field)
                                    time.sleep(0.5)
                                    self.driver.execute_script("arguments[0].click();", input_field)
                                    self.driver.execute_script("arguments[0].value = '';", input_field)
                                    self.driver.execute_script(f"arguments[0].value = '{value}';", input_field)
                                    
                                    # Dispara eventos
                                    for event in ["input", "change", "blur"]:
                                        self.driver.execute_script(f"arguments[0].dispatchEvent(new Event('{event}'));", input_field)
                                    
                                    logger.info(f"‚úÖ Campo '{label_text}' preenchido com sucesso")
                                    return True
                        except Exception as e:
                            continue
                except Exception as e:
                    continue
            
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro ao preencher campo: {str(e)}")
            return False

    def click_save_button(self):
        """Clica no bot√£o de salvar"""
        try:
            logger.info("üíæ Tentando clicar no bot√£o de salvar...")
            time.sleep(3)
            
            # Procura por bot√µes de salvar
            save_patterns = [
                "SAVE SOLUCION", "Save Solucion", "SAVE", "Save", 
                "GUARDAR", "Guardar", "ENVIAR", "Enviar"
            ]
            
            for pattern in save_patterns:
                save_buttons = self.driver.find_elements(By.XPATH, f"//button[contains(text(), '{pattern}')]")
                for button in save_buttons:
                    if button.is_displayed():
                        try:
                            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                            time.sleep(1)
                            self.driver.execute_script("arguments[0].click();", button)
                            logger.info(f"‚úÖ Clicado no bot√£o '{pattern}'")
                            time.sleep(2)
                            return True
                        except:
                            continue
            
            # √öltimo recurso: Enter
            try:
                active_element = self.driver.switch_to.active_element
                active_element.send_keys(Keys.ENTER)
                logger.info("‚úÖ Tecla Enter enviada")
                return True
            except:
                pass
            
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro ao clicar no bot√£o de salvar: {str(e)}")
            return False

    def run_automation(self):
        """
        VERS√ÉO CORRIGIDA - Executa automa√ß√£o com processamento din√¢mico
        """
        try:
            self.execution_start_time = datetime.datetime.now()
            
            # Notifica√ß√£o inicial
            timezone_info = datetime.timezone(datetime.timedelta(hours=-3))
            start_time_local = self.execution_start_time.replace(tzinfo=timezone_info)
            start_message = f"üöÄ **Cron Job iniciado** ({start_time_local.strftime('%H:%M')} UTC-3)\n\nüìÖ Pr√≥xima execu√ß√£o: em 6 horas\nüîß Modo: Railway Native Cron (CORRIGIDO)"
            self.send_discord_notification(start_message)
            
            logger.info("=" * 50)
            logger.info("üöÄ INICIANDO AUTOMA√á√ÉO CRON JOB (VERS√ÉO CORRIGIDA)")
            logger.info("=" * 50)
            
            # Setup do driver
            logger.info("üîß PASSO 1: Configurando driver...")
            if not self.setup_driver():
                raise Exception("Falha ao configurar o driver Chrome")
            logger.info("‚úÖ Driver configurado com sucesso")
            
            # Login
            logger.info("üîê PASSO 2: Fazendo login...")
            if not self.login():
                raise Exception("Falha no login")
            logger.info("‚úÖ Login realizado com sucesso")
            
            # Navegar para novelties
            logger.info("üß≠ PASSO 3: Navegando para novelties...")
            if not self.navigate_to_novelties():
                raise Exception("Falha ao navegar at√© Novelties")
            logger.info("‚úÖ Navega√ß√£o para novelties conclu√≠da")
            
            # Configurar exibi√ß√£o
            logger.info("‚öôÔ∏è PASSO 4: Configurando exibi√ß√£o de entradas...")
            if not self.configure_entries_display():
                raise Exception("Falha ao configurar exibi√ß√£o de entradas")
            logger.info("‚úÖ Configura√ß√£o de exibi√ß√£o conclu√≠da")
            
            # NOVO: Processamento din√¢mico
            logger.info("üîÑ PASSO 5: Processamento din√¢mico de novelties...")
            self.process_all_novelties()
            
            logger.info("üìä PASSO 6: Processamento conclu√≠do")
            logger.info(f"‚úÖ Sucessos: {self.success_count}, ‚ùå Falhas: {self.failed_count}")
            
            # Gerar relat√≥rio
            logger.info("üìã PASSO 7: Gerando relat√≥rio...")
            self.generate_report()
            
            # Salvar no banco de dados
            logger.info("üíæ PASSO 8: Salvando no banco de dados...")
            self.save_to_database()
            
            # Notifica√ß√£o de sucesso
            execution_time = (datetime.datetime.now() - self.execution_start_time).total_seconds()
            
            if self.success_count > 0:
                success_message = f"""‚úÖ **Cron Job conclu√≠do (CORRIGIDO)!**

üìä **Resultados:**
‚Ä¢ ‚úÖ Processadas: **{self.success_count}**
‚Ä¢ ‚ùå Falhas: **{self.failed_count}**
‚Ä¢ üìã Total encontradas: **{self.success_count + self.failed_count}**
‚Ä¢ üóÇÔ∏è Guias fechadas: **{self.closed_tabs}**
‚Ä¢ ‚è±Ô∏è Tempo: **{execution_time/60:.2f} min**

üõ†Ô∏è **Corre√ß√µes aplicadas:**
‚Ä¢ Processamento din√¢mico (sem √≠ndices fixos)
‚Ä¢ Sempre processa primeira linha dispon√≠vel
‚Ä¢ Elimina erro "Linha n√£o encontrada"
‚Ä¢ Detec√ß√£o inteligente de novelties

üîß **Detalhes:**
‚Ä¢ üìÑ Pagina√ß√£o: {'‚úÖ Sim' if self.found_pagination else '‚ùå N√£o'}
‚Ä¢ üì∏ Screenshots: {len(os.listdir('screenshots')) if os.path.exists('screenshots') else 0}
‚Ä¢ üîÑ **Pr√≥xima execu√ß√£o:** em 6 horas"""
            else:
                success_message = f"""‚ö†Ô∏è **Cron Job finalizado sem processamentos**

üìä **Estat√≠sticas:**
‚Ä¢ üìã Novelties encontradas: **{self.success_count + self.failed_count}**
‚Ä¢ ‚úÖ Processadas: **{self.success_count}**
‚Ä¢ ‚ùå Falhas: **{self.failed_count}**
‚Ä¢ ‚è±Ô∏è Tempo: **{execution_time/60:.2f} min**

‚ùì **Poss√≠veis causas:**
‚Ä¢ Todas j√° processadas anteriormente
‚Ä¢ Erro na detec√ß√£o dos bot√µes Save
‚Ä¢ Mudan√ßa na estrutura do site

üîÑ **Pr√≥xima verifica√ß√£o:** em 6 horas"""

            if self.failed_count > 0:
                success_message += f"\n\n‚ö†Ô∏è **Falhas encontradas:**"
                for i, item in enumerate(self.failed_items[:3]):  # Mostra apenas as primeiras 3
                    success_message += f"\n‚Ä¢ {item['id']}: {item['error'][:50]}..."
                
                if len(self.failed_items) > 3:
                    success_message += f"\n‚Ä¢ ... e mais {len(self.failed_items) - 3} falhas"
            
            # Determina se √© erro baseado nos resultados
            is_error = (self.success_count == 0 and (self.success_count + self.failed_count) > 0) or (self.failed_count > self.success_count)
            self.send_discord_notification(success_message, is_error=is_error)
            
            logger.info("=" * 50)
            logger.info("üéØ AUTOMA√á√ÉO CRON JOB CORRIGIDA CONCLU√çDA")
            logger.info("=" * 50)
            
        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO na automa√ß√£o: {str(e)}")
            logger.error(f"Traceback completo: {traceback.format_exc()}")
            
            # Captura screenshot de erro se poss√≠vel
            try:
                if self.driver:
                    error_screenshot = os.path.join(self.create_screenshots_folder(), "error.png")
                    self.driver.save_screenshot(error_screenshot)
                    logger.info(f"üì∏ Screenshot de erro salvo: {error_screenshot}")
            except:
                pass
            
            # Notifica√ß√£o de erro detalhada
            execution_time = (datetime.datetime.now() - self.execution_start_time).total_seconds() if self.execution_start_time else 0
            
            error_message = f"""‚ùå **ERRO CR√çTICO no Cron Job (CORRIGIDO)!**

üö® **Erro:** {str(e)[:300]}

üìä **Progresso at√© o erro:**
‚Ä¢ ‚úÖ Processadas: {self.success_count}
‚Ä¢ ‚ùå Falhas: {self.failed_count}
‚Ä¢ üìã Encontradas: {self.success_count + self.failed_count}
‚Ä¢ ‚è±Ô∏è Tempo at√© falha: {execution_time/60:.2f} min

üîß **Para debug:**
‚Ä¢ Verificar logs completos no Railway
‚Ä¢ Verificar screenshots salvos
‚Ä¢ Testar acesso manual ao Dropi

üîÑ **Pr√≥xima tentativa:** em 6 horas"""

            self.send_discord_notification(error_message, is_error=True)
            
        finally:
            # Fecha o navegador
            if self.driver:
                try:
                    logger.info("üîí Fechando navegador...")
                    self.driver.quit()
                    logger.info("‚úÖ Navegador fechado com sucesso")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao fechar navegador: {str(e)}")
            
            # IMPORTANTE: Termina o processo para permitir pr√≥xima execu√ß√£o
            logger.info("üèÅ Terminando processo...")
            sys.exit(0)

    def generate_report(self):
        """Gera relat√≥rio da execu√ß√£o"""
        report = {
            "total_processados": self.success_count,
            "total_falhas": self.failed_count,
            "itens_com_falha": self.failed_items,
            "guias_fechadas": self.closed_tabs,
            "encontrou_paginacao": self.found_pagination
        }
        
        logger.info("=" * 50)
        logger.info("üìã RELAT√ìRIO DE EXECU√á√ÉO")
        logger.info("=" * 50)
        logger.info(f"‚úÖ Total de novelties processadas com sucesso: {report['total_processados']}")
        logger.info(f"‚ùå Total de novelties com falha: {report['total_falhas']}")
        logger.info(f"üóÇÔ∏è Total de guias fechadas: {report['guias_fechadas']}")
        logger.info(f"üìÑ Encontrou pagina√ß√£o: {'Sim' if report['encontrou_paginacao'] else 'N√£o'}")
        
        if report['total_falhas'] > 0:
            logger.info("‚ùå Detalhes dos itens com falha:")
            for item in report['itens_com_falha']:
                logger.info(f"  ‚Ä¢ ID: {item['id']}, Erro: {item['error']}")
        
        logger.info("=" * 50)
        
        return report

    def save_to_database(self):
        """Salva os resultados no banco de dados"""
        try:
            execution_time = (datetime.datetime.now() - self.execution_start_time).total_seconds()
            
            save_execution_result(
                country=THIS_COUNTRY,
                total_processed=self.success_count,
                successful=self.success_count,
                failed=self.failed_count,
                execution_time=execution_time
            )
            
            logger.info("üíæ Resultados salvos no banco de dados com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar no banco de dados: {str(e)}")

def main():
    """Fun√ß√£o principal - EXECU√á√ÉO √öNICA PARA CRON"""
    logger.info("=" * 60)
    logger.info("üöÄ INICIANDO DROPI CHILE CRON JOB (VERS√ÉO CORRIGIDA)")
    logger.info("=" * 60)
    logger.info(f"üåç Ambiente: {'Railway' if is_railway() else 'Local'}")
    logger.info(f"üìÖ Data/Hora: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üïê Timezone: UTC (Railway) / Execu√ß√£o via Cron nativo")
    
    # Verifica se est√° pausado
    if os.getenv("BOT_PAUSED", "").lower() in ["true", "1", "yes"]:
        logger.info("üõë BOT PAUSADO - Vari√°vel BOT_PAUSED detectada")
        logger.info("Para reativar: remova a vari√°vel BOT_PAUSED ou mude para 'false'")
        sys.exit(0)
    
    try:
        # Executa automa√ß√£o UMA VEZ e termina
        logger.info("üéØ Executando automa√ß√£o √∫nica (Cron Job) - VERS√ÉO CORRIGIDA...")
        
        bot = DroplAutomationBot()
        bot.run_automation()
        
        logger.info("‚úÖ Cron Job finalizado com sucesso")
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è Interrompido pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå Erro no processo principal: {str(e)}")
        logger.error(traceback.format_exc())
        sys.exit(1)
    finally:
        logger.info("=" * 60)
        logger.info("üèÅ DROPI CHILE CRON JOB FINALIZADO (VERS√ÉO CORRIGIDA)")
        logger.info("üîÑ Pr√≥xima execu√ß√£o: autom√°tica via Railway Cron")
        logger.info("=" * 60)
        sys.exit(0)

if __name__ == "__main__":
    main()